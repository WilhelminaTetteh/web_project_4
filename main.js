(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const t=function(){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._settings=e,this._form=n}var n,r;return n=t,(r=[{key:"_showErrorMessage",value:function(e,t){var n=this._form.querySelector("#".concat(e.id,"-error"));n.textContent=t,e.classList.add(this._settings.inputErrorClass),n.classList.add(this._settings.errorClass)}},{key:"_hideErrorMessage",value:function(e){var t=this._form.querySelector("#".concat(e.id,"-error"));t.textContent="",e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass)}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideErrorMessage(e):this._showErrorMessage(e,e.validationMessage)}},{key:"_isFormValid",value:function(e){return e.every((function(e){return e.validity.valid}))}},{key:"_toggleButtonState",value:function(e,t){this._isFormValid(t)?(e.disabled=!1,e.classList.remove(this._settings.inactiveButtonClass)):(e.disabled=!0,e.classList.add(this._settings.inactiveButtonClass))}},{key:"_setEventListeners",value:function(){var e=this,t=Array.from(this._form.querySelectorAll(this._settings.inputSelector)),n=this._form.querySelector(this._settings.submitButtonSelector);this._toggleButtonState(n,t),this._form.addEventListener("reset",(function(){t.forEach((function(t){e._hideErrorMessage(t)})),n.disabled=!0,n.classList.add(e._settings.inactiveButtonClass)})),t.forEach((function(r){r.addEventListener("input",(function(o){e._checkInputValidity(r),e._toggleButtonState(n,t)}))}))}},{key:"enableValidation",value:function(){this._form.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}])&&e(n.prototype,r),t}();function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const r=function(){function e(t,n,r,o,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._data=t,this._isLiked=!1,this._id=t._id,this._userInfo=n,this._handleCardClick=r,this._handleDeleteCardClick=o,this._handleLikeClick=i}var t,r;return t=e,(r=[{key:"getCardLikes",value:function(){return this._data.likes.length}},{key:"getId",value:function(){return this._id}},{key:"_handleLikeIcon",value:function(e){e.target.classList.toggle("grid__icon_active"),this._handleLikeClick()}},{key:"isLiked",value:function(){return this._isLiked}},{key:"handleDeleteIcon",value:function(){this._cardElement.remove()}},{key:"_setEventListeners",value:function(){var e=this,t=this._cardElement.querySelector(".grid__icon"),n=this._cardElement.querySelector(".grid__delete-icon");t.addEventListener("click",(function(){return e._handleLikeClick()})),n.addEventListener("click",(function(){return e._handleDeleteCardClick()})),this._cardImage.addEventListener("click",(function(){return e._handleCardClick()}))}},{key:"updateLikeCount",value:function(e){this._cardElement.querySelector(".grid__likes").textContent=e}},{key:"updateLikeIconState",value:function(e){var t=this._cardElement.querySelector(".grid__icon");e?(this._isLiked=e,t.classList.add("grid__icon_active")):(this._isLiked=e,t.classList.remove("grid__icon_active"))}},{key:"createCard",value:function(){var e=this,t=document.querySelector(".grid__template").content.querySelector(".grid__item");this._cardElement=t.cloneNode(!0);var n=this._cardElement.querySelector(".grid__delete-icon");return this._userInfo._id===this._data.owner._id&&n.classList.add("grid__delete-show"),0!==this._data.likes.filter((function(t){return t._id===e._userInfo._id})).length&&(this._isLiked=!0),this.updateLikeCount(this.getCardLikes()),this.updateLikeIconState(this._isLiked),this._cardElement.setAttribute("id",this._id),this._cardImage=this._cardElement.querySelector(".grid__image"),this._cardText=this._cardElement.querySelector(".grid__text"),this._cardImage.style.backgroundImage="url(".concat(this._data.link,")"),this._cardText.textContent=this._data.name,this._setEventListeners(),this._cardElement}}])&&n(t.prototype,r),e}();function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const i=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._initialArray=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderer",value:function(){var e=this;this._initialArray.forEach((function(t){return e._renderer(t)}))}},{key:"addItem",value:function(e){this._container.append(e)}},{key:"prepend",value:function(e){this._container.prepend(e)}}])&&o(t.prototype,n),e}();function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const c=function(){function e(t){var n=t.userName,r=t.userJob,o=t.avatar;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.userName=document.querySelector(n),this.userJob=document.querySelector(r),this.avatar=document.querySelector(o)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{userName:this.userName.textContent,userJob:this.userJob.textContent}}},{key:"setUserInfo",value:function(e){var t=e.newName,n=e.newJob,r=e.avatar;this.userName.textContent=t,this.userJob.textContent=n,this.avatar.style.display="block",this.avatar.src=r}},{key:"setPersistedUserInfo",value:function(e){window.localStorage.setItem("userInfo",JSON.stringify(e))}},{key:"getPersistedUserInfo",value:function(){var e=window.localStorage.getItem("userInfo");return JSON.parse(e)}}])&&a(t.prototype,n),e}();function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const u=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){document.addEventListener("keydown",this._handleEscClose),this._popup.classList.add("modal_open")}},{key:"close",value:function(){document.removeEventListener("keydown",this._handleEscClose),this._popup.classList.remove("modal_open")}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("click",(function(t){(t.target.classList.contains("modal__button")||t.target.classList.contains("modal"))&&e.close()}))}}])&&s(t.prototype,n),e}();function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t,n){return(d="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=y(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?_(e):t}function _(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const v=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=y(r);if(o){var n=y(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return p(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._submitHandler=n._submitHandler.bind(_(n)),n._popupSubmit=t,n}return t=a,(n=[{key:"_getInputValues",value:function(){var e={};return Array.from(this._form.querySelectorAll(".form__input")).forEach((function(t){e[t.name]=t.value})),e}},{key:"renderLoading",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Saving...",t=this._popup.querySelector(".form__button");t.textContent=e}},{key:"setButtonText",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Save",t=this._popup.querySelector(".form__button");t.textContent=e}},{key:"close",value:function(){d(y(a.prototype),"close",this).call(this),this.setButtonText(),this._form.reset()}},{key:"_submitHandler",value:function(e){e.preventDefault();var t=this._getInputValues();this._popupSubmit(t),this.renderLoading()}},{key:"setEventListeners",value:function(){d(y(a.prototype),"setEventListeners",this).call(this),this._form=this._popup.querySelector(".form"),this._form.addEventListener("submit",this._submitHandler)}}])&&f(t.prototype,n),a}(u);function m(e){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(e,t){return(g=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function k(e,t){return!t||"object"!==m(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function E(e){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const S=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&g(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=E(r);if(o){var n=E(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return k(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._popupConfirmation=t,n.deletePermission(),n}return t=a,(n=[{key:"deletePermission",value:function(){document.querySelector(".form__delete-confirmation").addEventListener("click",this._popupConfirmation)}}])&&b(t.prototype,n),a}(u);function w(e){return(w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function C(e,t,n){return(C="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=P(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function O(e,t){return(O=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function I(e,t){return!t||"object"!==w(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function P(e){return(P=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const j=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&O(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=P(r);if(o){var n=P(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return I(this,e)});function a(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),i.call(this,e)}return t=a,(n=[{key:"open",value:function(e,t){C(P(a.prototype),"open",this).call(this);var n=this._popup.querySelector(".modal__image"),r=this._popup.querySelector(".modal__image-caption");n.src=e,r.textContent=t}}])&&L(t.prototype,n),a}(u);function T(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var q=function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))};const U=function(){function e(t){var n=t.baseUrl,r=t.authToken;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._authToken=r}var t,n;return t=e,(n=[{key:"getCardList",value:function(){return fetch("".concat(this._baseUrl,"/cards"),{headers:{authorization:this._authToken}}).then(q)}},{key:"getInfo",value:function(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:{authorization:this._authToken}}).then(q)}},{key:"getInitialData",value:function(){return Promise.all([this.getInfo(),this.getCardList()])}},{key:"addCard",value:function(e){var t=e.name,n=e.link;return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({name:t,link:n})}).then(q)}},{key:"removeCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:{authorization:this._authToken}}).then(q)}},{key:"deleteLike",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:{authorization:this._authToken}}).then(q)}},{key:"changeLikeCardStatus",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:{authorization:this._authToken}}).then(q)}},{key:"updateUserInfo",value:function(e){var t=e.name,n=e.about;return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({name:t,about:n})}).then(q)}},{key:"setUserAvatar",value:function(e){var t=e.avatar;return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({avatar:t})}).then(q)}}])&&T(t.prototype,n),e}();var R=document.querySelector(".profile__edit"),x=document.querySelector(".profile__add"),B=document.querySelector(".form__input_type_title"),N=document.querySelector(".form__input_type_description"),J=(document.querySelector(".profile__image"),document.querySelector(".avatar__overlay")),D={inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__error_visible"},A=new t(D,document.querySelector(".form")),V=new t(D,document.querySelector(".form_type_card")),z=new t(D,document.querySelector(".form_type_avatar"));A.enableValidation(),V.enableValidation(),z.enableValidation();var H=null,M=new U({baseUrl:"https://around.nomoreparties.co/v1/group-7",authToken:"47c83c4f-319d-4409-b351-cc8f7164bc50"}),F=new S(".modal_type_delete",(function(){M.removeCard(H.getId()).then((function(e){H.handleDeleteIcon(H.getId()),F.close()})).catch((function(e){console.log(e)}))}));function G(e){var t=e.res,n=new r(t,K.getPersistedUserInfo(),(function(){Q.open(t.link,t.name)}),(function(){H=n,F.open()}),(function(){n.isLiked()?M.deleteLike(n.getId()).then((function(e){n.updateLikeCount(e.likes.length),n.updateLikeIconState(!1)})).catch((function(e){console.log(e)})):M.changeLikeCardStatus(n.getId()).then((function(e){n.updateLikeCount(e.likes.length),n.updateLikeIconState(!0)})).catch((function(e){console.log(e)}))}));return n}F.setEventListeners(),M.getInitialData().then((function(e){var t=e[0],n=e[1];K.setUserInfo({newName:t.name,newJob:t.about,avatar:t.avatar}),K.setPersistedUserInfo(t),function(e){var t=new i({items:e,renderer:function(e){var n=G({res:e}).createCard();t.addItem(n)}},".grid__container");t.renderer();var n=new v(".modal_type_add-card",(function(e){M.addCard(e).then((function(e){var r=G({res:e});t.prepend(r.createCard()),n.close()})).catch((function(e){console.log(e)}))}));n.setEventListeners(),x.addEventListener("click",(function(){n.open()}))}(n)})).catch((function(e){console.log(e)}));var K=new c({userName:".profile__title",userJob:".profile__description",avatar:".profile__image"}),Q=new j(".modal_type_image");Q.setEventListeners();var W=new v(".modal_type_edit-profile",(function(e){M.updateUserInfo({name:e.title,about:e.description}).then((function(e){K.setUserInfo({newName:e.name,newJob:e.about,avatar:e.avatar}),W.close()})).catch((function(e){console.log(e)}))}));W.setEventListeners(),R.addEventListener("click",(function(){var e=K.getUserInfo();B.value=e.userName,N.value=e.userJob,W.open()}));var X=new v(".modal_type_avatar",(function(e){M.setUserAvatar({avatar:e.link}).then((function(e){K.setUserInfo({newName:e.name,newJob:e.about,avatar:e.avatar}),X.close()})).catch((function(e){console.log(e)}))}));X.setEventListeners(),J.addEventListener("click",(function(){X.open()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,